<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.liuweiwei.mapper.EmployeeMapper">
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        emp_id, emp_name, gender, email, d_id
    </sql>
    <sql id="WithDept_Column_List">
  	    e.emp_id, e.emp_name, e.gender, e.email, e.d_id,d.dept_id,d.dept_name
    </sql>

    <select id="selectAll" resultType="com.liuweiwei.bean.EmployeeExample">
        select
            e.*,
            d.dept_id as deptId,
            d.dept_name as deptName
        FROM
            employee e
        left join
            department d on e.`d_id`=d.`dept_id`
        where
            1=1
    </select>

    <select id="selectOne" resultType="com.liuweiwei.bean.EmployeeExample">
        select
            e.*,
            d.dept_id as deptId,
            d.dept_name as deptName
        FROM
            employee e
        left join
            department d on e.`d_id`=d.`dept_id`
        where
            1=1
        limit 0, 1
    </select>

    <update id="update" parameterType="com.liuweiwei.bean.Employee">
        update employee set emp_name=#{empName},gender=#{gender},email=#{email} where id=#{id}
    </update>

    <update id="updateOne" parameterType="com.liuweiwei.bean.Employee">
        update employee set gender=#{gender},email=#{email} where id=#{id}
    </update>

    <select id="getById" resultType="com.liuweiwei.bean.Employee" parameterType="int">
        select
        <include refid="Base_Column_List"/>
        from employee
        where emp_id = #{empId}
    </select>

    <delete id="delete" parameterType="java.lang.Integer">
        delete from employee where emp_id=#{empId}
    </delete>

    <delete id="deleteBatch" parameterType="list">
        delete from employee WHERE emp_id IN
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <insert id="saveOne" parameterType="com.liuweiwei.bean.Employee">
        insert into employee values(default,#{empName},#{gender},#{email},#{dId})
    </insert>

    <select id="selectByName" resultType="com.liuweiwei.bean.Employee" parameterType="string">
        select * from employee where emp_name=#{empName}
    </select>
</mapper>